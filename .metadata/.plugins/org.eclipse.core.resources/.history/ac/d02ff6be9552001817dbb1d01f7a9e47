import org.apache.spark._
import org.apache.spark.streaming.StreamingContext
import org.apache.spark.streaming.Seconds 
import org.apache.spark.streaming.kafka.KafkaUtils
 
object KafkaWordCount {  
  def main( args:Array[String] ){
    println("============")
    val conf = new SparkConf().setMaster("local[2]").setAppName("KafkaReceiver")
    val ssc = new StreamingContext(conf, Seconds(10))
    
    val kafkaStream = KafkaUtils.createStream(ssc,"localhost:2181","spark-streaming-consumer-group", Map("meetup" -> 5))
//need to change the topic name and the port number accordingly
     //ssc - StreamingContext object
    //zkQuorum - Zookeeper quorum (hostname:port,hostname:port,..)
    //groupId - The group id for this consumer
    //topics - Map of (topic_name -> numPartitions) to consume. Each partition is consumed in its own thread
   // val words = kafkaStream.flatMap(x =>x._2.split(" "))
    // words.print()
    //val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
 
    kafkaStream.print()  //prints the stream of data received
    //wordCounts.print()   //prints the wordcount result of the stream
    println("wordcount=====")
    ssc.start()
    ssc.awaitTermination()
  }
  
}