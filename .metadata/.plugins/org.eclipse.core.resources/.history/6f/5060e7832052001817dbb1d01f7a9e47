import org.apache.spark._
import org.apache.spark.streaming.StreamingContext
import org.apache.spark.streaming.Seconds 
import org.apache.spark.streaming.kafka.KafkaUtils
import kafka.serializer.StringDecoder


object KafkaMongo {
  def main( args:Array[String] ){
  val conf = new SparkConf().setMaster("local[2]").setAppName("KafkaReceiver")
    val ssc = new StreamingContext(conf, Seconds(10))
  val kafkaParams = Map[String, Object]("bootstrap.servers" -> "localhost:9092",
 "key.deserializer" -> classOf[StringDeserializer],
"value.deserializer" -> classOf[StringDeserializer],
"group.id" -> "use_a_separate_group_id_for_each_stream",
"auto.offset.reset" -> "latest",
"enable.auto.commit" -> (false: java.lang.Boolean))
 
val mongoDbFormat = "com.stratio.datasource.mongodb"
val mongoDbDatabase = "ColoursInfo"
val mongoDbCollection = "Colour"

val MongoDbOptiops = Map(MongodbConfig.Host -> "localhost:27017",
MongodbConfig.Database -> mongoDbDatabase,
MongodbConfig.Collection -> mongoDbCollection)
  }